{"pageProps":{"article":{"header":{"slug":"python_atcoder","matter":{"title":"pythonでAtCoderの入出力チートシート","createdAt":"2021-07-17T2334:54.325Z","tags":["python"]},"excerpt":"python で atcoder の入出力をするやつ AtCoder という文字列を久しぶりに打ってタイポしたくらいには最近 AtCoder に触れてない自分ですが、最近バイト先の後輩が Python と AtCoder 始めて 応援してます。そういうわけで、入出力操作をここに残しておこうかと。 \\~~Pyhton 書..."},"bodyMdText":"\n## python で atcoder の入出力をするやつ\n\nAtCoder という文字列を久しぶりに打ってタイポしたくらいには最近 AtCoder に触れてない自分ですが、最近バイト先の後輩が Python と AtCoder 始めて\n応援してます。そういうわけで、入出力操作をここに残しておこうかと。  \n~~Pyhton 書くのも久しぶりだなぁ...。~~\n\n#### ① 文字列を一つ受け取る時\n\nまず最も単純なのがこのパターンです。最近の A 問題だと[この辺り](https://atcoder.jp/contests/abc189/tasks/abc189_a)がありますね。\n\nPython では、標準入力の受け取りは input()関数で行います。input()は、標準入力を\"1 行\"\"文字列として\"受け取る関数です。今回だと以下。\n\n```python\nc = input()\n```\n\nついでに解いてみましょう。\n\n```python\nc = input()\n\nflag = (len(set([c[0], c[1], c[2]])) == 1)\nans = \"Won\" if flag else \"Lost\"\n\nprint(ans)\n```\n\nこれで AC です。\n\n#### ② 数値を一つ受け取るパターン\n\nお次は数値です。例題は[こちら](https://atcoder.jp/contests/abc200/tasks/abc200_a)で。  \n上と同じように input()関数を使うのですが、先ほど書いたように、input()関数で受け取った値は全て文字列となっています。そこで、input()で受け取った文字列に int()を作用させます。\n\n```python\nn = int(input())\n```\n\nこれで数値を受け取ることができます。せっかくなのでこちらも回答を。\n\n```python\nn = int(input())\n\nans = (n - 1) // 100 + 1\nprint(ans)\n```\n\n#### ③ 文字列を複数個受け取るパターン\n\nAtCoder では、一行に複数個入力が投げられることがしばしばあります。例えば[これ](https://atcoder.jp/contests/abc148/tasks/abc148_b)の二行目とか。  \nこういう時は、input()関数で受け取った文字列に対して、split()関数を作用させます。split()は、引数として指定した文字列区切りのリストを返します。\n\n例えば、\n\n```python\nurl = \"kojiblog/my-contents/about/atcoder\"\nsplited_url = url.split(\"/\")\n\n# splited_url は[\"kojiblog\", \"my-contents\", \"about\", \"atcoder\"] というリスト\n```\n\nって感じです。この引数の部分に何も指定しない場合、デフォルトで\"空白文字区切り\"となります。これを利用すると、複数文字列がその数だけ受け取れます。例&回答は以下。\n\n```python\nn = int(input())\ns, t = input().split()\n\nans = \"\"\nfor i in range(n):\n    ans += (s[i] + t[i])\n\nprint(ans)\n```\n\n#### ④ 複数の数値を受け取るパターン\n\n複数の数値を受け取るパターンはなかなかめんどくさいです。例は[こちら](https://atcoder.jp/contests/abc152/tasks/abc152_b)。  \nこの場合は、input().split()で一旦文字列として入力を受け取り、そのリスト全体に対して int()を作用させます。この時に使うのが map()関数です。  \nmap 関数は\"高階関数\"と呼ばれるものの一種で、第一引数に関数を、第二引数にリスト like なオブジェクトを受け取ります(難しい場合はリストと考えてもらって大丈夫です)。  \nこの時、map(f, list)は list の要素全部に f を作用させたリストを返します。なので、この問題の場合は以下のようになります。\n\n```python\na, b = map(int, input().split())\n\nl = [str(a) * b, str(b) * a]\nl.sort()\n\nprint(l[0])\n```\n\n#### ⑤ 入力が複数行あるパターン\n\nこれで最後です。AtCoder の頻出パターンとして、\"最初に整数 n を受け取ったあと、n 行の入力を受け取る\"というものがあります。例えば[これ](https://atcoder.jp/contests/abc134/tasks/abc134_c)。  \n複雑そうですが、実は案外単純で、最初に受け取った n 分だけ for 文で input()を回せばいいです。受け取った物はリストにでも入れておきましょう。解答は以下。\n\n```python\nn = int(input())\nl = []\n\n# for文でAiの値を受け取る。\nfor i in range(n):\n    x = int(input())\n    l.append(x)\n\npre = [] * (n + 1)\nsuff = [] * (n + 1)\n\nfor i in range(1, n + 1):\n    pre[i] = max(pre[i - 1], l[i - 1])\nfor i in range(n - 1, -1, -1):\n    suff[i] = max(suff[i + 1], l[i])\nfor i in range(1, n + 1):\n    print(max(pre[i - 1], suff[i]))\n```\n\n実はもっとスマートな\"リスト内包表記\"という物があるのですが、それはまた別の機会に。\n\n## 終わりに\n\nまあざっとこんな感じです。割と適当に書いたのであまり解答ではないと思いますが、今回はそこは本質ではないので悪しからず...。\n","tocMdText":"- [python で atcoder の入出力をするやつ](#python-%E3%81%A7-atcoder-%E3%81%AE%E5%85%A5%E5%87%BA%E5%8A%9B%E3%82%92%E3%81%99%E3%82%8B%E3%82%84%E3%81%A4)\n    + [① 文字列を一つ受け取る時](#%E2%91%A0-%E6%96%87%E5%AD%97%E5%88%97%E3%82%92%E4%B8%80%E3%81%A4%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8B%E6%99%82)\n    + [② 数値を一つ受け取るパターン](#%E2%91%A1-%E6%95%B0%E5%80%A4%E3%82%92%E4%B8%80%E3%81%A4%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3)\n    + [③ 文字列を複数個受け取るパターン](#%E2%91%A2-%E6%96%87%E5%AD%97%E5%88%97%E3%82%92%E8%A4%87%E6%95%B0%E5%80%8B%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3)\n    + [④ 複数の数値を受け取るパターン](#%E2%91%A3-%E8%A4%87%E6%95%B0%E3%81%AE%E6%95%B0%E5%80%A4%E3%82%92%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3)\n    + [⑤ 入力が複数行あるパターン](#%E2%91%A4-%E5%85%A5%E5%8A%9B%E3%81%8C%E8%A4%87%E6%95%B0%E8%A1%8C%E3%81%82%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3)\n- [終わりに](#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB)"}},"__N_SSG":true}