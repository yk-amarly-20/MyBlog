{
  "pageProps": {
    "article": {
      "header": {
        "slug": "module_federation",
        "matter": {
          "title": "マイクロフロントエンド（Module Federation）とReact",
          "createdAt": "2024-06-23T0004:54.325Z",
          "tags": ["React", "typescript"]
        },
        "excerpt": "1\\. はじめに 今回はフロントエンド関連で新たに知った知見をば。 大規模なフロントエンドを複数チームで開発・デプロイしたい場合、マイクロフロントエンド（Micro-Frontends）が有効です。バックエンドのマイクロサービスと同様に、フロント側も機能ごとに独立したアプリケーションとして分割し、それらを統合するアーキ..."
      },
      "bodyMdText": "\n## 1. はじめに\n\n今回はフロントエンド関連で新たに知った知見をば。\n大規模なフロントエンドを複数チームで開発・デプロイしたい場合、マイクロフロントエンド（Micro-Frontends）が有効です。バックエンドのマイクロサービスと同様に、フロント側も機能ごとに独立したアプリケーションとして分割し、それらを統合するアーキテクチャです。\n最近は Webpack 5 に標準搭載された Module Federation を利用することで、ランタイムで別アプリのビルド成果物を動的にロードできるようになり、マイクロフロントエンド実装が飛躍的に簡単になりました。本稿では、React を例にホスト（Shell）／リモート（Remote）構成を一から構築する手順を解説します\n\n## 2. Module Federation の概要\n\nModule Federation は、以下を可能にする機能です。\n\n- Remote アプリケーションがエクスポートしたモジュールを、\n- Host アプリケーションから動的にインポート\n- しかもビルドバンドルには含めずに、ランタイムでフェッチ\n\nこれにより、各チームが独立リリースしたアプリをホスト側がシームレスに組み込めます。\n\n```scss\n┌─────────┐      ┌──────────┐\n│ RemoteA │      │ Remote B │\n│ (federated)    │ (federated)\n└─────┬───┘      └───┬──────┘\n      │                │\n      │ expose         │ expose\n      ▼                ▼\n┌────────────────────────────────┐\n│            Host App           │\n│  import(\"remoteA/Button\")     │\n│  import(\"remoteB/Header\")     │\n└────────────────────────────────┘\n```\n\n## 3. プロジェクト構成例\n\n```css\n/mf-shell/      ← ホストアプリ (Host)\n/mf-remote-header/ ← リモートアプリ A (Header)\n/mf-remote-button/ ← リモートアプリ B (Button)\n\n```\n\n各フォルダで npm init → 必要パッケージをインストールする。\n\n## 4. Remote(A)：Header アプリのセットアップ\n\n### 4.1 webpack.config.ts\n\n```ts\n// mf-remote-header/webpack.config.ts\nimport HtmlWebpackPlugin from \"html-webpack-plugin\";\nimport { Configuration, container } from \"webpack\";\nconst { ModuleFederationPlugin } = container;\n\nconst config: Configuration = {\n  mode: \"development\",\n  entry: \"./src/index.tsx\",\n  output: { publicPath: \"auto\" }, // npm run start 時に http://localhost:3001/ が使われます\n  devServer: { port: 3001 },\n  resolve: { extensions: [\".ts\", \".tsx\", \".js\"] },\n  module: {\n    rules: [\n      {\n        test: /\\.[jt]sx?$/,\n        loader: \"babel-loader\",\n        options: { presets: [\"@babel/preset-react\", \"@babel/preset-typescript\"] },\n      },\n    ],\n  },\n  plugins: [\n    new ModuleFederationPlugin({\n      name: \"headerApp\",\n      filename: \"remoteEntry.js\",\n      exposes: {\n        \"./Header\": \"./src/components/Header.tsx\",\n      },\n      shared: {\n        react: { singleton: true, eager: false, requiredVersion: \"^18.0.0\" },\n        \"react-dom\": { singleton: true, eager: false, requiredVersion: \"^18.0.0\" },\n      },\n    }),\n    new HtmlWebpackPlugin({ template: \"./public/index.html\" }),\n  ],\n};\n\nexport default config;\n```\n\n### src/components/Header.tsx\n\n```tsx\nimport React, { FC } from \"react\";\n\nexport const Header: FC = () => (\n  <header style={{ background: \"#282c34\", padding: \"1rem\", color: \"#fff\" }}>\n    <h1>マイクロフロントエンド Header</h1>\n  </header>\n);\n```\n\n### 4.3 src/index.tsx\n\n```tsx\nimport React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { Header } from \"./components/Header\";\n\nconst container = document.getElementById(\"root\");\nif (container) {\n  const root = createRoot(container);\n  root.render(<Header />);\n}\n```\n\n## 5. Remote(B)：Button アプリのセットアップ\n\n### 5.1 webpack.config.ts\n\n```tsx\n// mf-remote-button/webpack.config.ts\nimport HtmlWebpackPlugin from \"html-webpack-plugin\";\nimport { Configuration, container } from \"webpack\";\nconst { ModuleFederationPlugin } = container;\n\nconst config: Configuration = {\n  mode: \"development\",\n  entry: \"./src/index.tsx\",\n  output: { publicPath: \"auto\" },\n  devServer: { port: 3002 },\n  resolve: { extensions: [\".ts\", \".tsx\", \".js\"] },\n  module: {\n    rules: [\n      {\n        test: /\\.[jt]sx?$/,\n        loader: \"babel-loader\",\n        options: { presets: [\"@babel/preset-react\", \"@babel/preset-typescript\"] },\n      },\n    ],\n  },\n  plugins: [\n    new ModuleFederationPlugin({\n      name: \"buttonApp\",\n      filename: \"remoteEntry.js\",\n      exposes: {\n        \"./Button\": \"./src/components/Button.tsx\",\n      },\n      shared: {\n        react: { singleton: true, requiredVersion: \"^18.0.0\" },\n        \"react-dom\": { singleton: true, requiredVersion: \"^18.0.0\" },\n      },\n    }),\n    new HtmlWebpackPlugin({ template: \"./public/index.html\" }),\n  ],\n};\n\nexport default config;\n```\n\n### 5.2 src/components/Button.tsx\n\n```tsx\nimport React, { FC, ReactNode, MouseEventHandler } from \"react\";\n\ninterface ButtonProps {\n  children: ReactNode;\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n}\n\nexport const Button: FC<ButtonProps> = ({ onClick, children }) => (\n  <button style={{ padding: \"0.5rem 1rem\", fontSize: \"1rem\" }} onClick={onClick}>\n    {children}\n  </button>\n);\n```\n\n### 5.3 src/index.tsx\n\n```tsx\nimport React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { Button } from \"./components/Button\";\n\nconst App: React.FC = () => {\n  const handleClick = () => console.log(\"clicked\");\n  return <Button onClick={handleClick}>Remote Button</Button>;\n};\n\nconst container = document.getElementById(\"root\");\nif (container) {\n  createRoot(container).render(<App />);\n}\n```\n\n## 6. Host：Shell アプリのセットアップ\n\n### 6.1 webpack.config.ts\n\n```tsx\n// mf-shell/webpack.config.ts\nimport HtmlWebpackPlugin from \"html-webpack-plugin\";\nimport { Configuration, container } from \"webpack\";\nconst { ModuleFederationPlugin } = container;\n\nconst config: Configuration = {\n  mode: \"development\",\n  entry: \"./src/index.tsx\",\n  output: { publicPath: \"auto\" },\n  devServer: { port: 3000 },\n  resolve: { extensions: [\".ts\", \".tsx\", \".js\"] },\n  module: {\n    rules: [\n      {\n        test: /\\.[jt]sx?$/,\n        loader: \"babel-loader\",\n        options: { presets: [\"@babel/preset-react\", \"@babel/preset-typescript\"] },\n      },\n    ],\n  },\n  plugins: [\n    new ModuleFederationPlugin({\n      name: \"shellApp\",\n      remotes: {\n        headerApp: \"headerApp@http://localhost:3001/remoteEntry.js\",\n        buttonApp: \"buttonApp@http://localhost:3002/remoteEntry.js\",\n      },\n      shared: {\n        react: { singleton: true, requiredVersion: \"^18.0.0\" },\n        \"react-dom\": { singleton: true, requiredVersion: \"^18.0.0\" },\n      },\n    }),\n    new HtmlWebpackPlugin({ template: \"./public/index.html\" }),\n  ],\n};\n\nexport default config;\n```\n\n### 6.2 src/App.tsx\n\n```tsx\nimport React, { Suspense, useState, FC } from \"react\";\n\n// リモートコンポーネントを動的インポート\nconst Header = React.lazy(() => import(\"headerApp/Header\"));\nconst Button = React.lazy(() => import(\"buttonApp/Button\"));\n\nexport const App: FC = () => {\n  const [count, setCount] = useState<number>(0);\n\n  return (\n    <>\n      <Suspense fallback={<div>Loading Header...</div>}>\n        <Header />\n      </Suspense>\n\n      <main style={{ padding: \"1rem\" }}>\n        <p>クリック数：{count}</p>\n        <Suspense fallback={<div>Loading Button...</div>}>\n          <Button onClick={() => setCount(c => c + 1)}>Increment</Button>\n        </Suspense>\n      </main>\n    </>\n  );\n};\n```\n\n### 6.3 src/index.tsx\n\n```tsx\nimport React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { App } from \"./App\";\n\nconst container = document.getElementById(\"root\");\nif (container) {\n  createRoot(container).render(<App />);\n}\n```\n\n## 7. 図解：リモート読み込みの流れ\n\n```text\n[ Shell (3000) ]\n    │\n    │ import('headerApp/Header')\n    │──────────►\n    │           fetch ─────────────▶ http://localhost:3001/remoteEntry.js\n    │           evaluate RemoteA   ▶ URL埋め込み\n    │◀────────── resolve Module\n    ▼\n  Header コンポーネントをレンダリング\n```\n\n## 8. 共有依存性（Shared Modules）の管理\n\n- singleton 設定で React の複数バージョン共存を防止\n- 必要に応じて eager: true や requiredVersion を追加し、確実に同一バージョンをロード\n\n```js\nshared: {\n  react: { singleton: true, requiredVersion: '^18.0.0' },\n  'react-dom': { singleton: true, requiredVersion: '^18.0.0' },\n}\n```\n\n## 9. ビルド＆起動\n\n各フォルダで以下を実行\n\n```bash\n# 各リモートを起動\ncd mf-remote-header && npm run start\ncd mf-remote-button && npm run start\n\n# Host を起動\ncd mf-shell && npm run start\n```\n\nブラウザで http://localhost:3000 を開くと、リモートコンポーネントが統合された UI が見える。\n\n## 10. CI/CD・デプロイ戦略\n\n1. 各リモートを独立ビルド → S3／CDN へ remoteEntry.js をアップ\n\n2. ホストアプリは環境変数 でリモート URL を切り替え\n\n3. バージョンタグとキャッシュバスティング（例：remoteEntry.[hash].js）を併用\n\n## 11. まとめ\n\n- Module Federation でマイクロフロントエンドが容易に実現\n\n- リモート単位で独立デプロイ → チームのスループット向上\n\n- shared 設定で依存性コンフリクトを回避\n\n- CI/CD を工夫して運用コストを最小化\n",
      "tocMdText": "- [1. はじめに](#1-%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB)\n- [2. Module Federation の概要](#2-module-federation-%E3%81%AE%E6%A6%82%E8%A6%81)\n- [3. プロジェクト構成例](#3-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90%E4%BE%8B)\n- [4. Remote(A)：Header アプリのセットアップ](#4-remoteaheader-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97)\n  * [4.1 webpack.config.ts](#41-webpackconfigts)\n  * [src/components/Header.tsx](#srccomponentsheadertsx)\n  * [4.3 src/index.tsx](#43-srcindextsx)\n- [5. Remote(B)：Button アプリのセットアップ](#5-remotebbutton-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97)\n  * [5.1 webpack.config.ts](#51-webpackconfigts)\n  * [5.2 src/components/Button.tsx](#52-srccomponentsbuttontsx)\n  * [5.3 src/index.tsx](#53-srcindextsx)\n- [6. Host：Shell アプリのセットアップ](#6-hostshell-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97)\n  * [6.1 webpack.config.ts](#61-webpackconfigts)\n  * [6.2 src/App.tsx](#62-srcapptsx)\n  * [6.3 src/index.tsx](#63-srcindextsx)\n- [7. 図解：リモート読み込みの流れ](#7-%E5%9B%B3%E8%A7%A3%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E3%81%AE%E6%B5%81%E3%82%8C)\n- [8. 共有依存性（Shared Modules）の管理](#8-%E5%85%B1%E6%9C%89%E4%BE%9D%E5%AD%98%E6%80%A7shared-modules%E3%81%AE%E7%AE%A1%E7%90%86)\n- [9. ビルド＆起動](#9-%E3%83%93%E3%83%AB%E3%83%89%EF%BC%86%E8%B5%B7%E5%8B%95)\n- [10. CI/CD・デプロイ戦略](#10-cicd%E3%83%BB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E6%88%A6%E7%95%A5)\n- [11. まとめ](#11-%E3%81%BE%E3%81%A8%E3%82%81)"
    }
  },
  "__N_SSG": true
}
