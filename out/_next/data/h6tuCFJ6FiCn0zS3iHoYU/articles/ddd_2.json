{"pageProps":{"article":{"header":{"slug":"ddd_2","matter":{"title":"DDDについて（2）","createdAt":"2021-10-12T0001:54.325Z","tags":["DDD","Kotlin"]},"excerpt":"1\\. ValueObject について 1.1 基本的な定義 識別子を持たない 例えば「住所(Address)」や「金額(Money)」といったドメイン概念の場合、同じ属性の組み合わせであれば同一の値オブジェクトとみなせます。 そのため、id: String のような一意な識別子フィールドは基本的に不要です。 不変性..."},"bodyMdText":"\n## 1. ValueObject について\n\n### 1.1 基本的な定義\n\n- 識別子を持たない\n\n  - 例えば「住所(Address)」や「金額(Money)」といったドメイン概念の場合、同じ属性の組み合わせであれば同一の値オブジェクトとみなせます。\n\n  - そのため、id: String のような一意な識別子フィールドは基本的に不要です。\n\n- 不変性（Immutability）\n\n  - 一度生成したら内部状態が変化しない。\n\n  - データ破壊的なメソッド（setter や var での再代入）は原則として避け、必要とあれば「新しいインスタンスを返す」メソッドを用意する。\n\n- 同値性（Equals / HashCode）\n\n  - 属性（フィールド）の値がすべて同じ場合、equals() も hashCode() も等しくなるよう実装する。(kotlin の場合)\n\n  - Kotlin の data class を使えば、自動的に属性すべてを比較してくれるため、VO には最適。\n\n- ドメインルール・バリデーションを持つ\n\n  - EmailAddress や PhoneNumber のように「文字列としての形式チェック」「範囲チェック」など、値に関するドメイン固有の制約を constructor（または factory）で実施する。\n\n  - エラー時は IllegalArgumentException などを投げて、「不正な値オブジェクトはそもそも生成できない」ようにする。\n\n## 2. Kotlin を活かした VO の基本パターン\n\n### 2.1 Kotlin の data class を使う\n\nもっともシンプルに実装できるのが、data class による定義です。以下は「住所(Address)」を VO 化した例です。\n\n```kotlin\ndata class Address(\n    val street: String,\n    val city: String,\n    val postalCode: String,\n    val country: String\n) {\n    init {\n        require(street.isNotBlank()) { \"Street は空にできません。\" }\n        require(city.isNotBlank()) { \"City は空にできません。\" }\n        require(postalCode.matches(Regex(\"\\\\d{3}-\\\\d{4}\"))) { \"PostalCode は XXX-XXXX の形式である必要があります。\" }\n        require(country.isNotBlank()) { \"Country は空にできません。\" }\n    }\n}\n```\n\n以上のコードでは、 `Address` という VO を作成したものになります。\n`Address` は `street`, `city`, `postalCode`, `country` という住所に関する情報を持っていて、それぞれに関する入力ルールも保持しています。\nこの定義でも問題ないのですが、弊チームでのコーディングルールでは生の型は基本的に使わず、上の例の `street` などもすべて VO にするということにしています。\n\n```kotlin\ndata class Address(\n    val street: Street,\n    val city: City,\n    val postalCode: PostalCode,\n    val country: Country\n) {\n    ...\n}\n\ndata class Street(\n    val value: String\n) {\n    init {\n        require(value.isNotBlank()){ \"Street は空にできません。\" }\n    }\n}\n\n// その他のVOも同様\n```\n\nこのようにするメリットは、他の VO や Entity で `Street` を使い回す際にルールを再度定義する必要がないという点です。何度も同じルールを複数箇所で書くと、ルールの書き間違いなどが起こりやすく脆弱な状態です。それを阻止するために VO を作り、そこにルールを持たせるようにするというのは明確な利点です。\nデメリットは書くのがめんどい（我慢せい）。\n\n## 3. 発展的な VO パターンとベストプラクティス\n\n### 3.1 再利用可能なバリデーションロジックの共有\n\n複数の VO で同じバリデーションロジック（電話番号の正規表現やメールアドレスの形式チェックなど）を使いたい場合、共通クラス・ユーティリティにまとめることで重複を避けられます。\n\n```kotlin\nobject ValidationUtils {\n    private val EMAIL_REGEX = Regex(\"^[\\\\w\\\\.\\\\-]+@[\\\\w\\\\.\\\\-]+\\\\.[a-zA-Z]{2,}\\$\")\n    private val PHONE_REGEX = Regex(\"\\\\+\\\\d{1,3}-\\\\d{7,15}\")\n    private val POSTAL_CODE_REGEX = Regex(\"\\\\d{3}-\\\\d{4}\")\n\n    fun validateEmail(value: String) {\n        require(value.matches(EMAIL_REGEX)) { \"メールアドレスの形式が不正です: $value\" }\n    }\n\n    fun validatePhone(value: String) {\n        require(value.matches(PHONE_REGEX)) { \"電話番号の形式が不正です: $value (例: +81-9012345678)\" }\n    }\n\n    fun validatePostalCode(value: String) {\n        require(value.matches(POSTAL_CODE_REGEX)) { \"郵便番号の形式が不正です: $value (例: 123-4567)\" }\n    }\n}\n```\n\nただこれはこれでこの object が肥大化しますし、個人的には各 VO に持たせるのが良さそうに思います。\nどうしても共通化したい場合は、util クラスを validation ごとに作成し、各 VO ではそのクラスを継承させるのが良さそうです。\n\n```kotlin\ndata class Email(\n    value: String\n) {\n    init {\n        validateEmail(value)\n    }\n    fun validateEmail(value: String) {\n        require(value.matches(EMAIL_REGEX)) { \"メールアドレスの形式が不正です: $value\" }\n    }\n}\n\n// 各Emailを実装する際にこのクラスを継承させる\ndata class UserEmail(value: String): Email(value)\n```\n\n### 3.2 Factory パターンで複雑な VO を生成する\n\nVO がディレクトリ形式の String や複数の入力を受け取りつつ、生成ロジックが複雑になる場合は、専用の Factory オブジェクト を用意すると責務が明確になります。\n\n```kotlin\nobject AddressFactory {\n    /**\n     * 日本向け住所を生成（都道府県・市区町村・番地・建物名 の入力を受け取る例）\n     */\n    fun createJapaneseAddress(\n        prefecture: String,\n        city: String,\n        block: String,\n        building: String? = null\n    ): Address {\n        val street = \"$prefecture $city $block\"\n        val fullStreet = if (building.isNullOrBlank()) street else \"$street $building\"\n        return Address(\n            street = fullStreet,\n            city = city,\n            postalCode = \"${prefecture.take(2)}-${city.take(3)}-0000\", // 仮の郵便番号ロジック\n            country = \"Japan\"\n        )\n    }\n\n    /**\n     * US 向け住所を生成（番地・通り名・州・郵便番号 の入力を受け取る例）\n     */\n    fun createUSAddress(\n        streetNumber: String,\n        streetName: String,\n        state: String,\n        zipCode: String\n    ): Address {\n        val street = \"$streetNumber $streetName\"\n        return Address(\n            street = street,\n            city = state,\n            postalCode = zipCode,\n            country = \"USA\"\n        )\n    }\n}\n\n// 使用例\nfun main() {\n    val tokyoAddress = AddressFactory.createJapaneseAddress(\n        prefecture = \"Tokyo-to\",\n        city = \"Chiyoda-ku\",\n        block = \"1-1-1\",\n        building = \"皇居\"\n    )\n    println(tokyoAddress)  // Address(street=Tokyo-to Chiyoda-ku 1-1-1 皇居, city=Chiyoda-ku, postalCode=To-Ch-0000, country=Japan)\n\n    val nyAddress = AddressFactory.createUSAddress(\n        streetNumber = \"1600\",\n        streetName = \"Pennsylvania Ave NW\",\n        state = \"Washington DC\",\n        zipCode = \"20500\"\n    )\n    println(nyAddress)  // Address(street=1600 Pennsylvania Ave NW, city=Washington DC, postalCode=20500, country=USA)\n}\n```\n\n### 3.3 配列・リスト・マップをフィールドに持つ VO\n\nVO 内に List や Set、Map などのコレクションをフィールドとして持つ場合、mutable なコレクション参照を外部にさらすと不変性が崩れる可能性があります。以下のように対策します。\n\n```kotlin\ndata class Tag(\n    val name: String\n)\n\ndata class TagList(\n    private val _tags: List<Tag>  // private にして外部参照を隠蔽\n) {\n    val tags: List<Tag>\n        get() = _tags.toList()    // 毎回コピーを返して不変性を確保\n\n    init {\n        require(_tags.isNotEmpty()) { \"タグは 1 つ以上必要です。\" }\n        require(_tags.map { it.name }.distinct().size == _tags.size) {\n            \"同じタグ名は含められません。\"\n        }\n    }\n\n    // タグを追加した新しい TagList を返す\n    fun addTag(newTag: Tag): TagList {\n        require(_tags.none { it.name == newTag.name }) { \"同じタグは既に存在します。\" }\n        return TagList(_tags + newTag)\n    }\n}\n\n```\n\n## 4 アンチパターンと注意点\n\n### 4.1 大きすぎる Value Object (バケツ VO) の警戒\n\nすべてのフィールドを単一の大きな VO にまとめると、\n\n- テストが難しくなる\n- バリデーションエラー時の責務が曖昧になる\n- 読みやすさ・可読性が低下する\n- エンティティに埋め込んだときのパフォーマンスに影響が出る\n\nという問題が起こり得ます。\n「責務が一つの VO が小さく、シンプルである」 という原則を守り、必要に応じて複数の VO に分割しましょう。\n\n### 4.2 可変コレクションを公開しない\n\nVO 内で var tags: MutableList<String> のように mutable なコレクションを公開してしまうと、不変性が崩れてしまいます。\n\n必ず private なコレクションを使い、外部には不変コレクション（List, Set）を返す か、防御的コピーを行いましょう（前述の TagList 参照）。\n\n### 4.3 equals/hashCode の整合性を保つ\n\nequals() と hashCode() は、常に「属性すべて」の値を比較するように実装 しなければ、VO の同一性判断が崩れます。\n\ndata class を使う場合は自動生成されますが、明示的に equals/hashCode をカスタマイズしたい場合は、細心の注意を持って実装してください。\n\n### 終わりに\n\n今回は VO についてあれこれ書きました。\n次回は Entity について書いていこうかと思います。\n","tocMdText":"- [1. ValueObject について](#1-valueobject-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6)\n  * [1.1 基本的な定義](#11-%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E5%AE%9A%E7%BE%A9)\n- [2. Kotlin を活かした VO の基本パターン](#2-kotlin-%E3%82%92%E6%B4%BB%E3%81%8B%E3%81%97%E3%81%9F-vo-%E3%81%AE%E5%9F%BA%E6%9C%AC%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3)\n  * [2.1 Kotlin の data class を使う](#21-kotlin-%E3%81%AE-data-class-%E3%82%92%E4%BD%BF%E3%81%86)\n- [3. 発展的な VO パターンとベストプラクティス](#3-%E7%99%BA%E5%B1%95%E7%9A%84%E3%81%AA-vo-%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%A8%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9)\n  * [3.1 再利用可能なバリデーションロジックの共有](#31-%E5%86%8D%E5%88%A9%E7%94%A8%E5%8F%AF%E8%83%BD%E3%81%AA%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF%E3%81%AE%E5%85%B1%E6%9C%89)\n  * [3.2 Factory パターンで複雑な VO を生成する](#32-factory-%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%A7%E8%A4%87%E9%9B%91%E3%81%AA-vo-%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B)\n  * [3.3 配列・リスト・マップをフィールドに持つ VO](#33-%E9%85%8D%E5%88%97%E3%83%BB%E3%83%AA%E3%82%B9%E3%83%88%E3%83%BB%E3%83%9E%E3%83%83%E3%83%97%E3%82%92%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AB%E6%8C%81%E3%81%A4-vo)\n- [4 アンチパターンと注意点](#4-%E3%82%A2%E3%83%B3%E3%83%81%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%A8%E6%B3%A8%E6%84%8F%E7%82%B9)\n  * [4.1 大きすぎる Value Object (バケツ VO) の警戒](#41-%E5%A4%A7%E3%81%8D%E3%81%99%E3%81%8E%E3%82%8B-value-object-%E3%83%90%E3%82%B1%E3%83%84-vo-%E3%81%AE%E8%AD%A6%E6%88%92)\n  * [4.2 可変コレクションを公開しない](#42-%E5%8F%AF%E5%A4%89%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E5%85%AC%E9%96%8B%E3%81%97%E3%81%AA%E3%81%84)\n  * [4.3 equals/hashCode の整合性を保つ](#43-equalshashcode-%E3%81%AE%E6%95%B4%E5%90%88%E6%80%A7%E3%82%92%E4%BF%9D%E3%81%A4)\n  * [終わりに](#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB)"}},"__N_SSG":true}