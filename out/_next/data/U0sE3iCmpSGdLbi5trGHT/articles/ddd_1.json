{"pageProps":{"article":{"header":{"slug":"ddd_1","matter":{"title":"DDDについて（１）","createdAt":"2021-10-10T0001:54.325Z","tags":["DDD","Kotlin"]},"excerpt":"0\\. 近況 今回から DDD の記事を書いていこうかと思います。 というのも、数ヶ月前から最近内定した企業様の方で内定者インターンを始めさせていただいたのですが、弊チームでは BE の設計手法として DDD（ドメイン駆動設計）を採用しており、所属する少し前から勉強を始めました。 実践的なタスクもこなし、最近既存の設計..."},"bodyMdText":"\n## 0. 近況\n\n今回から DDD の記事を書いていこうかと思います。\nというのも、数ヶ月前から最近内定した企業様の方で内定者インターンを始めさせていただいたのですが、弊チームでは BE の設計手法として DDD（ドメイン駆動設計）を採用しており、所属する少し前から勉強を始めました。\n実践的なタスクもこなし、最近既存の設計のリファクタリングを率先してできるようになってきたので、知識をまとめるという意味でも記事として残していこうかと思います。\n\n## 1. はじめに：DDD（Domain-Driven Design）って何？\n\nまず、「DDD」とは Domain-Driven Design（ドメイン駆動設計） の略称で、エリック・エヴァンス（Eric Evans）氏が提唱したソフトウェア開発手法・設計指針のことです。\nここで、ドメインとは`自社／自分が解決すべきビジネス領域や業務領域のこと。` のことですね。\n\n### 1.1 なぜ DDD が注目されるのか？\n\n#### i. 複雑なビジネスロジックを明確化\n\nビジネスルールや業務フローは、要件変更や新規機能追加のたびに複雑化しがちです。DDD では「ドメインモデル」を中心に設計を行い、仕様変更の影響範囲を最小化しやすい構造を目指します。\n\n#### ii. チーム内での認識統一（ユビキタス言語）\n\n開発者、ドメインエキスパート（ビジネス担当者）、プロジェクトマネージャーなどが共通の言葉（ユビキタス言語）を使うことで、要件の齟齬を減らし、コミュニケーションコストを下げます。\nDDD はプログラムの設計手法ということで「開発者内に閉じたもの」と誤解されがちですが、認識統一の観点から、用語については上流階層のメンバーも含めて考慮していくのが芳しいですね。（自戒）\n\n#### iii. 柔軟なアーキテクチャ\n\nレイヤードアーキテクチャやクリーンアーキテクチャと親和性が高く、業務ロジックとインフラ周り（DB／外部 API／UI）を明確に分離することで、変更に強いシステムを設計できます。\n\n### 1.2 勉強するマインドセット\n\nそもそも新しい設計手法を勉強する場合すべてに通ずるところではありますが、自分は以下の点に気をつけて勉強しました。自分への今後の備忘録というところもあり残しておこうかとおもいます。\n\n#### i. まずは全体像をつかみ、わからないところは人に聞く\n\nDDD は `設計手法` です。どういうことかというと、そもそも独学では勉強しにくい分野です。なぜなら、本当の具体例は世に溢れるサンプルコードの中にしかないのだから。\nなので、正直理解しにくいところは職場の先輩エンジニアなどに聞くのがいいかと思います。\n\n#### ii. 用語にとらわれすぎない\n\nここからは Entity、Value Object、Aggregate、Repository、Service、Factory、Module などの用語がたくさん登場します。ですが用語自体には本質的な意味はなく、あくまでどのような役割があるかということを理解すれば問題ないかと思います。実際、弊チームでも `Module` などという言葉はあまり使っていないですね。\n（とはいえ、あまり別の名前を使っていると書籍を読む際などに苦労します多分）\n\n#### iii. サンプルコードで肌感覚をつかむ\n\n日本語の定義だけ読んでいても正直理解が難しいかと思います。適宜サンプルコードを読んだり書いたりするのが理解の近道かと思います。（弊記事では kotlin のサンプルコードを書いていきます）\n\n## 3. 終わりに\n\n今回は DDD の導入でした。次回からは各セクションに分けて細かい記事を書いていこうかと思います。\n","tocMdText":"- [0. 近況](#0-%E8%BF%91%E6%B3%81)\n- [1. はじめに：DDD（Domain-Driven Design）って何？](#1-%E3%81%AF%E3%81%98%E3%82%81%E3%81%ABddddomain-driven-design%E3%81%A3%E3%81%A6%E4%BD%95)\n  * [1.1 なぜ DDD が注目されるのか？](#11-%E3%81%AA%E3%81%9C-ddd-%E3%81%8C%E6%B3%A8%E7%9B%AE%E3%81%95%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%8B)\n    + [i. 複雑なビジネスロジックを明確化](#i-%E8%A4%87%E9%9B%91%E3%81%AA%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF%E3%82%92%E6%98%8E%E7%A2%BA%E5%8C%96)\n    + [ii. チーム内での認識統一（ユビキタス言語）](#ii-%E3%83%81%E3%83%BC%E3%83%A0%E5%86%85%E3%81%A7%E3%81%AE%E8%AA%8D%E8%AD%98%E7%B5%B1%E4%B8%80%E3%83%A6%E3%83%93%E3%82%AD%E3%82%BF%E3%82%B9%E8%A8%80%E8%AA%9E)\n    + [iii. 柔軟なアーキテクチャ](#iii-%E6%9F%94%E8%BB%9F%E3%81%AA%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3)\n  * [1.2 勉強するマインドセット](#12-%E5%8B%89%E5%BC%B7%E3%81%99%E3%82%8B%E3%83%9E%E3%82%A4%E3%83%B3%E3%83%89%E3%82%BB%E3%83%83%E3%83%88)\n    + [i. まずは全体像をつかみ、わからないところは人に聞く](#i-%E3%81%BE%E3%81%9A%E3%81%AF%E5%85%A8%E4%BD%93%E5%83%8F%E3%82%92%E3%81%A4%E3%81%8B%E3%81%BF%E3%82%8F%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84%E3%81%A8%E3%81%93%E3%82%8D%E3%81%AF%E4%BA%BA%E3%81%AB%E8%81%9E%E3%81%8F)\n    + [ii. 用語にとらわれすぎない](#ii-%E7%94%A8%E8%AA%9E%E3%81%AB%E3%81%A8%E3%82%89%E3%82%8F%E3%82%8C%E3%81%99%E3%81%8E%E3%81%AA%E3%81%84)\n    + [iii. サンプルコードで肌感覚をつかむ](#iii-%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A7%E8%82%8C%E6%84%9F%E8%A6%9A%E3%82%92%E3%81%A4%E3%81%8B%E3%82%80)\n- [3. 終わりに](#3-%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB)"}},"__N_SSG":true}