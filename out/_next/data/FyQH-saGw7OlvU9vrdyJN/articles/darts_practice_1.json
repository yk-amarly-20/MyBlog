{"pageProps":{"article":{"header":{"slug":"darts_practice_1","matter":{"title":"時系列解析(1)","createdAt":"2020-12-14T1634:53.325Z","tags":["python","time_series_analysis","machine_learinig"]},"excerpt":"はじめに 大学では数学系として確率論を専攻する中で時系列解析について勉強したりするんですが、 それ関連でついこの間 python の時系列解析ライブラリであるdartsというものを 発見したので、触ってみました。 依存ライブラリのバージョン(pandas のバージョンが 1.1.0 だったり...)とかちょこちょこ問題..."},"bodyMdText":"\n## はじめに\n\n大学では数学系として確率論を専攻する中で時系列解析について勉強したりするんですが、\nそれ関連でついこの間 python の時系列解析ライブラリである[darts](https://github.com/unit8co/darts)というものを\n発見したので、触ってみました。\n依存ライブラリのバージョン(pandas のバージョンが 1.1.0 だったり...)とかちょこちょこ問題はありますが、結構使いやすかったので\nチュートリアルをなぞりながら、時系列解析の知識はその都度軽く紹介しつつ記事に残せたらと思います。\nチュートリアルが 10 個ほどのセクションに分かれているので順にまとめていきます。\n\n## 時系列解析とは\n\nまず時系列解析について軽く触れておきます。  \n「一年間のサラダチキンの売れ行き」、「ここ数年の USJ の来客数」など、季節や時間で変動するデータを、単位時間ごとに集計したものを\n時系列データと呼びます。平たく言えば、このようなデータを利用して未来のデータを予測するのが時系列解析と呼ばれる分野です(クッっっっそ雑な説明なのであしからず)。  \n未来のデータを予測する手法としては様々なものがありますが、チュートリアルの前半では既存のモデルにデータを当てはめて予測を実行します。  \nこの先も必要に応じて時系列解析の基礎知識は補っていきます。 では早速チュートリアルをみていきましょう。\n\n## チュートリアル 1 (darts_intro)\n\nここにコード全部書いてたらしんどいのでチュートリアルの notebook の[URL](https://github.com/unit8co/darts/blob/master/examples/01-darts-intro.ipynb)おいときます。  \ndatrs の install は pip で行えます。(さっき言ったバージョン関係で error と warnings が出ますがとりあえず無視です)\n\n```shell\npip install 'u8darts[all]'\n```\n\nめぼしい物はこの辺ですね。\n\n```python\nfrom darts import TimeSeries\nfrom darts.models import (\n    NaiveSeasonal,\n    NaiveDrift,\n    Prophet,\n    ExponentialSmoothing,\n    ARIMA,\n    AutoARIMA,\n    StandardRegressionModel,\n    Theta,\n    FFT\n)\nfrom darts.metrics import mape, mase\nfrom darts.utils.statistics import check_seasonality, plot_acf, plot_residuals_analysis\n```\n\ndarts では、pandas.DataFrame から TimeSeries という時系列データをインスタンス化し、それを用いて解析を実行します。\n\n```python\ndf = pd.read_csv('AirPassengers.csv', delimiter=\",\")\nseries = TimeSeries.from_dataframe(df, 'Month', ['#Passengers'])\n\nseries.plot()\n```\n\n結果はこんな感じ。\n![series_plot](/Images/darts_practice_1/series_plot.svg)\n\n次にモデルを適用していくのですが、その前に series を training、validation データに分割していきます。\n\n```python\ntrain, val = series.split_before(pd.Timestamp('19580101'))\n```\n\nでは train データを用いてモデルを fitting していきます。  \nいろいろモデルは実装されていますが、まずはナイーブなモデルを用います。  \nは？ナイーブってなんやねんって思うかもしれませんが、ここでいうナイーブとは簡単なモデルみたいな意味合いです。今から用いる NaiveSeasonal モデルの実装をみてみると\n\n```python\nclass NaiveSeasonal(ForecastingModel):\n~~~~~~中略~~~~~~~\n\n    def fit(self, series: TimeSeries):\n        super().fit(series)\n        raise_if_not(len(series) >= self.K, 'The time series requires at least K={} points'.format(self.K), logger)\n        self.last_k_vals = series.univariate_values()[-self.K:]\n\n    def predict(self, n: int):\n        super().predict(n)\n        forecast = np.array([self.last_k_vals[i % self.K] for i in range(n)])\n        return self._build_forecast_series(forecast)\n```\n\n引数で渡す K を用いて、K 個前と同じ値を返す、という実装になっています。つまりデータに周期性があると、その周期の値として K を渡せばそこそこ予測できる、ということが予想できますね。  \nでは実際に fitting、予測を行っていきます。\n\n```python\nseasonal_model = NaiveSeasonal(K=12)\nseasonal_model.fit(train)\nseasonal_forecast = seasonal_model.predict(36)\n\nseries.plot(label='actual')\nseasonal_forecast.plot(label='naive forecast (K=12)')\nplt.legend()\n```\n\n結果は以下の通りです。\n![naive_seasonal](/Images/darts_practice_1/naive_seasonal.svg)\n\nところで、先ほどのコードでは K=12 としていましたが、この周期の値は autocorrelation function(ACF)と呼ばれる関数を用いて求めることができます(日本語では自己相関係数です)。\nj 次の自己相関係数の定義は以下の様になっています。\n\n![mape_math](/Images/darts_practice_1/acf.png)\n\n平たくいうと、この値が大きいと時系列データの周期が j である、と言えそう、ってことです(曖昧ですが、ACF が高いこととデータに周期性があることは同値ではありません。)。  \ndarts にはこの ACF を plot する関数が実装されています。\n\n```python\nplot_acf(train, m = 12, alpha = .05)\n```\n\n![acf](/Images/darts_practice_1/acf.svg)\nこれをみると、j=12 の ACF が高いのがわかります。(j=0 が 1 を取るのは、自分自身との相関をとっているからです。)\nつまりこのデータの周期は 12 である可能性が高いということですね。\n\nでは、先ほどの NaiveSeasonal の plot 結果に戻りましょう。\n周期が 12 と分かれば、予測の際には 12 個前のデータをとってくればよく、NaiveSeasonal(K=12)をモデルに選ぶのは妥当な様に思われます。\nですが、plot 結果をみると明らかにズレが生じているのがわかります。これは時系列データでは重要なファクターである、「トレンド」を見逃していることによるズレです。  \n一番最初にあげた、「一年間のサラダチキンの売れ行き」を例にとって考えます。\n![chicken](/Images/darts_practice_1/chicken.png)\n\nこれは 2015~2020 のサラダチキンの売り上げデータです。実はこのデータには一年間を通じてある程度の周期性があることがわかっています。  \n冷たいサラダチキンは夏によく売れますし、冬になると売高は大きく下がります。これは直感的にも予想できる事実でしょう。  \nところが、極端ですが「2015 年の 8 月」と「2019 年の 12 月」を比べたとき、明らかに後者の方が売り上げが大きいのがわかります。  \nこれは、サラダチキンの売り上げにそもそもの増加傾向があるからです。この様に、周期性などを無視して、全体の増減を表す指標のことをトレンドと呼びます。\n\nトレンドによる変動が大きい場合、周期性のみからの予測では大した結果は生まれません。そこで、darts にはトレンドを解析して予測する関数も実装されています。\nトレンドと周期性による予測を足し合わせたものを plot してみましょう。\n\n```python\ndrift_model = NaiveDrift()  # トレンドを学習するモデル\ndrift_model.fit(train)\ndrift_forecast = drift_model.predict(36)\n\ncombined_forecast = drift_forecast + seasonal_forecast - train.last_value()\n\nseries.plot()\ncombined_forecast.plot(label='combined')\ndrift_forecast.plot(label='drift')\nplt.legend()\n```\n\n![drift](/Images/darts_practice_1/drift.svg)\n\nこれで初めて、パッと見そこそこいい感じの予測ができてそうですね。\nですが、「ぱっと見」では実際の問題に応用するのはできないですよね。そこで、モデルの適用具合を知る指標として、ここでは mean absolute percentage error(平均絶対パーセント誤差、以下 mape)というものを使います。\nmape の定義は以下です。\n\n![mape_math](/Images/darts_practice_1/mape.png)\n\nmape が大きいほど誤差が大きく、小さいほど適応度が高いということになります。\nmape は便利ですが、いくつか欠点もあります。\n\n・実測値で割っているため、実測値に 0 が存在する場合は ZeroDivisionError 返ってくる。  \n・実測値がクッソでかいとき、100%超える。\n\nの様な感じです。それぞれ対応策はあるのですが、ここでは述べずにとりあえず今回のモデルに使ってみましょう。\n\n```python\nprint(\"Mean absolute percentage error for the combined naive drift + seasonal: {:.2f}%.\".format(\n      mape(series, combined_forecast)))\n```\n\n```\nMean absolute percentage error for the combined naive drift + seasonal: 5.66%.\n```\n\nこんな感じです。\n他にもいろいろモデルや評価指標があったりしますが、それについては追々追記していこうと思います。\n\n## References\n\n1. github (https://github.com/unit8co/darts)\n2. 【データサイエンスを知るコラム】Vol.5 　市場への真の影響を時系列分析で測る(https://www.intage.co.jp/gallery/datascience-column5/)\n","tocMdText":"- [はじめに](#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB)\n- [時系列解析とは](#%E6%99%82%E7%B3%BB%E5%88%97%E8%A7%A3%E6%9E%90%E3%81%A8%E3%81%AF)\n- [チュートリアル 1 (darts_intro)](#%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB-1-darts_intro)\n- [References](#references)"}},"__N_SSG":true}