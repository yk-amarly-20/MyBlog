{
  "pageProps": {
    "article": {
      "header": {
        "slug": "ddd_4",
        "matter": {
          "title": "DDDについて（3）",
          "createdAt": "2021-10-25T0001:54.325Z",
          "tags": ["DDD", "Kotlin"]
        },
        "excerpt": "1\\. Repository が担う責務と目的 1.1 なぜ Repository が必要なのか？ DDD において、Repository（リポジトリ） は、「アグリゲートルート（主に Entity）を永続化層（DB・外部サービスなど）から取得・保存するためのインターフェース」 です。以下のような意図・メリットがありま..."
      },
      "bodyMdText": "\n## 1. Repository が担う責務と目的\n\n### 1.1 なぜ Repository が必要なのか？\n\nDDD において、Repository（リポジトリ） は、「アグリゲートルート（主に Entity）を永続化層（DB・外部サービスなど）から取得・保存するためのインターフェース」 です。以下のような意図・メリットがあります。\n\n- 永続化の具体的手法を隠蔽する\n  - ドメインモデル（アグリゲートやエンティティ）は、永続化のための仕組み（SQL/JPA/MongoDB 等）を一切知らなくても、永続化の手法を Repository に閉じ込めることで隠蔽できる\n- テスト容易性の向上\n  - ロジックを分離することで、単体テストが容易になる。\n  - 先述の通り、永続化手法を閉じ込めているため、永続化ロジックが変わったとしても repository の test のみで検証できるのも good\n- 永続化操作を集約ごとに定義できる\n  - 「ID で取得する」「すべて取得する」「ページングして取得する」「検索条件で取得する」「保存する」「削除する」などの操作を、1 集約ごとに定義できて見通しが立ちやすい\n\n## 2. リポジトリインターフェースの設計\n\n### 2.1 定義する層\n\nrepository の実装はドメイン層の実装に依存するが、ドメイン層はインフラ層に依存してはいけない。この問題を解消すべく、依存性の逆転を行う必要がある。\nそのためには、インターフェースのみドメイン層に実装し、実際の操作はインフラ層に記述する、のような書き方をする必要がある。\n\n```pgsql\ncom.example.myapp.domain\n├─ model\n│   └─ User.kt\n├─ repository\n│   └─ UserRepository.kt    ← ここにインターフェースを定義\n└─ service\n    └─ UserService.kt\n```\n\n### 2.2 リポジトリインターフェースに含めるべきメソッド\n\nリポジトリインターフェースは、「アグリゲートルートを操作するために必要最低限のメソッド」 に絞るべきです。たとえば、User エンティティを例にすると以下のようになります。\n\n```kotlin\npackage com.example.myapp.domain.repository\n\nimport com.example.myapp.domain.model.User\nimport com.example.myapp.domain.model.UserId\nimport com.example.myapp.domain.specification.Specification\n\n/**\n * User アグリゲートを永続化層から取得・保存するためのリポジトリインターフェース\n */\ninterface UserRepository {\n    /**\n     * 指定した ID の User を返す。存在しなければ null を返す\n     */\n    fun findByIdOrNull(id: UserId): User?\n\n    /**\n     * 指定した ID の User を返す。存在しなければ 例外を投げる\n     */\n    fun findById(id: UserId): User\n\n    /**\n     * 条件にマッチする User 一覧を返す。ページング、ソート情報などを渡せる仕様。\n     * Specification を使う例では、検索条件を Specification オブジェクトとして渡す。\n     */\n    fun findAll(spec: Specification<User>, pageRequest: PageRequest): PagedResult<User>\n\n    /**\n     * User を保存または更新する。アグリゲートルートの状態をそのまま永続化する。\n     */\n    fun create(user: User): User\n\n    /**\n     * 指定した ID の User を削除する。\n     */\n    fun deleteById(id: UserId)\n}\n```\n\n- 永続化、復元は集約単位で行うようにする\n  - 集約内の repository で他集約の entity の永続化、復元は行わない\n- `findById` か `findByIdOrNull` の使い分けは呼び出し先で判断\n\n### 2.3 実装\n\ninteraface の実装先はインフラ層に。\n\n```kotlin\npackage com.example.myapp.infrastructure.repository.jdbc\n\nimport com.example.myapp.domain.model.User\nimport com.example.myapp.domain.model.UserId\nimport com.example.myapp.domain.model.UserStatus\nimport com.example.myapp.domain.model.UserStatusType\nimport com.example.myapp.domain.repository.UserRepository\nimport com.example.myapp.domain.specification.Specification\nimport com.example.myapp.domain.repository.PageRequest\nimport com.example.myapp.domain.repository.PagedResult\nimport java.sql.Connection\nimport javax.sql.DataSource\nimport java.time.LocalDateTime\n\nclass UserRepositoryImpl(private val dataSource: DataSource) : UserRepository {\n\n    override fun findByIdOrNull(id: UserId): User? {\n        dataSource.connection.use { conn ->\n            val sql = \"SELECT user_id, name, email, status_type, status_updated_at, created_at, created_by, updated_at, updated_by, version \" +\n                      \"FROM users WHERE user_id = ?\"\n            conn.prepareStatement(sql).use { stmt ->\n                stmt.setString(1, id.value)\n                stmt.executeQuery().use { rs ->\n                    return if (rs.next()) mapRowToUser(rs) else null\n                }\n            }\n        }\n    }\n\n    override fun findAll(spec: Specification<User>, pageRequest: PageRequest): PagedResult<User> {\n        dataSource.connection.use { conn ->\n            // まず総件数を取得\n            val countSql = \"SELECT COUNT(*) FROM users WHERE ${spec.toSqlCondition()}\"\n            val total = conn.prepareStatement(countSql).use { stmt ->\n                // spec に応じたパラメータ設定\n                spec.setParameters(stmt, 1)\n                stmt.executeQuery().let { if (it.next()) it.getInt(1) else 0 }\n            }\n\n            // ページングデータ取得\n            val offset = pageRequest.page * pageRequest.size\n            val selectSql = \"\"\"\n                SELECT user_id, name, email, status_type, status_updated_at, created_at, created_by, updated_at, updated_by, version\n                FROM users\n                WHERE ${spec.toSqlCondition()}\n                ORDER BY created_at DESC\n                LIMIT ? OFFSET ?\n            \"\"\".trimIndent()\n\n            val users = conn.prepareStatement(selectSql).use { stmt ->\n                var idx = 1\n                // Specification によるパラメータ設定\n                spec.setParameters(stmt, idx).also { idx += it }\n                stmt.setInt(idx++, pageRequest.size)\n                stmt.setInt(idx, offset)\n                stmt.executeQuery().use { rs ->\n                    val list = mutableListOf<User>()\n                    while (rs.next()) {\n                        list += mapRowToUser(rs)\n                    }\n                    list\n                }\n            }\n\n            val totalPages = if (total == 0) 0 else (total + pageRequest.size - 1) / pageRequest.size\n            return PagedResult(users, total, totalPages, pageRequest.page)\n        }\n    }\n\n    override fun create(user: User): User {\n        dataSource.connection.use { conn ->\n            conn.autoCommit = false\n            try {\n                // すでに存在するかチェック\n                val existing = findById(user.id)\n                if (existing == null) {\n                    // INSERT\n                    val insertSql = \"\"\"\n                        INSERT INTO users (\n                            user_id, name, email, status_type, status_updated_at,\n                            created_at, created_by, updated_at, updated_by, version\n                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n                    \"\"\".trimIndent()\n                    conn.prepareStatement(insertSql).use { stmt ->\n                        stmt.setString(1, user.id.value)\n                        stmt.setString(2, user.name)\n                        stmt.setString(3, user.email.value)\n                        stmt.setString(4, user.status.type.name)\n                        stmt.setObject(5, user.status.updatedAt)\n                        stmt.setObject(6, user.createdAt)\n                        stmt.setString(7, user.createdBy)\n                        stmt.setObject(8, user.updatedAt)\n                        stmt.setString(9, user.updatedBy)\n                        stmt.setLong(10, user.version)\n                        stmt.executeUpdate()\n                    }\n                } else {\n                    // UPDATE（楽観的ロックチェック）\n                    val updateSql = \"\"\"\n                        UPDATE users SET\n                          name = ?, email = ?, status_type = ?, status_updated_at = ?,\n                          updated_at = ?, updated_by = ?, version = version + 1\n                        WHERE user_id = ? AND version = ?\n                    \"\"\".trimIndent()\n                    conn.prepareStatement(updateSql).use { stmt ->\n                        var idx = 1\n                        stmt.setString(idx++, user.name)\n                        stmt.setString(idx++, user.email.value)\n                        stmt.setString(idx++, user.status.type.name)\n                        stmt.setObject(idx++, user.status.updatedAt)\n                        stmt.setObject(idx++, user.updatedAt)\n                        stmt.setString(idx++, user.updatedBy)\n                        stmt.setString(idx++, user.id.value)\n                        stmt.setLong(idx, user.version)\n                        val updatedCount = stmt.executeUpdate()\n                        if (updatedCount == 0) throw OptimisticLockException(\"バージョン不整合: ${user.id.value}\")\n                    }\n                }\n                conn.commit()\n                return user\n            } catch (ex: Exception) {\n                conn.rollback()\n                throw ex\n            }\n        }\n    }\n\n    override fun deleteById(id: UserId) {\n        dataSource.connection.use { conn ->\n            conn.prepareStatement(\"DELETE FROM users WHERE user_id = ?\").use { stmt ->\n                stmt.setString(1, id.value)\n                stmt.executeUpdate()\n            }\n        }\n    }\n\n    /**\n     * ResultSet を User ドメインモデルにマッピングするヘルパーメソッド\n     */\n    private fun mapRowToUser(rs: java.sql.ResultSet): User {\n        val id = UserId(rs.getString(\"user_id\"))\n        val name = rs.getString(\"name\")\n        val email = EmailAddress(rs.getString(\"email\"))\n        val statusType = UserStatusType.valueOf(rs.getString(\"status_type\"))\n        val statusUpdatedAt = rs.getObject(\"status_updated_at\", LocalDateTime::class.java)\n        val status = UserStatus(statusType, statusUpdatedAt)\n        val createdAt = rs.getObject(\"created_at\", LocalDateTime::class.java)\n        val createdBy = rs.getString(\"created_by\")\n        val updatedAt = rs.getObject(\"updated_at\", LocalDateTime::class.java)\n        val updatedBy = rs.getString(\"updated_by\")\n        val version = rs.getLong(\"version\")\n\n        return User(\n            id = id,\n            name = name,\n            email = email,\n            status = status,\n            createdAt = createdAt,\n            createdBy = createdBy,\n            updatedAt = updatedAt,\n            updatedBy = updatedBy,\n            version = version\n        )\n    }\n}\n```\n\n- DB 周りの共通操作（ `dataSource.connection.use` など）については共通実装として別で実装して、repository からは呼び出すだけにしとくほうがいい\n  - 今回は簡単のためベタ書きしてる\n- ORM を使った書き方もあるが、弊チームでは使っていない\n  - 単純に実装が追いついていないだけで今後導入する可能性あり\n  - （この先はお気持ち）\n    - ORM の欠点として、「複雑なクエリは実装できない」というものがある\n    - が、ORM で実装できないような複雑なクエリが存在する状況というのは、そもそもの設計が良くない可能性がある\n      - 例: 集約が大きすぎる or 細かすぎるなど\n    - なので、ORM を導入するということが「良い設計」の一つの指標になる可能性もある\n    - とはいえ検索クエリなどどうしてもある程度複雑なクエリになってしまうパターンもあるため、導入の際は現状の実装を吟味する必要はあり。\n\n## 3. リポジトリのアンチパターンと注意点\n\n### 3.1 リポジトリにドメインロジックを置く\n\n- リポジトリは「永続化操作」の責務に特化するべきで、「パラメータの妥当性チェック」などはドメイン層やユースケース層で扱うほうが明確。\n- リポジトリにロジックが混在すると、永続化手法を切り替えたときにロジックを移植し忘れたり、重複実装が発生するリスクがある。\n\n### 3.2 トランザクションを跨ぐ誤用\n\n- Repository 内で別の repository を呼んでしまうなど、一つの操作が複数のトランザクションにまたがってしまうなどは避けるべき\n\n## 終わりに\n\n今回は repository について書きました。次回はドメインサービスとかかな。\n",
      "tocMdText": "- [1. Repository が担う責務と目的](#1-repository-%E3%81%8C%E6%8B%85%E3%81%86%E8%B2%AC%E5%8B%99%E3%81%A8%E7%9B%AE%E7%9A%84)\n  * [1.1 なぜ Repository が必要なのか？](#11-%E3%81%AA%E3%81%9C-repository-%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%E3%81%8B)\n- [2. リポジトリインターフェースの設計](#2-%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%81%AE%E8%A8%AD%E8%A8%88)\n  * [2.1 定義する層](#21-%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B%E5%B1%A4)\n  * [2.2 リポジトリインターフェースに含めるべきメソッド](#22-%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%81%AB%E5%90%AB%E3%82%81%E3%82%8B%E3%81%B9%E3%81%8D%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89)\n  * [2.3 実装](#23-%E5%AE%9F%E8%A3%85)\n- [3. リポジトリのアンチパターンと注意点](#3-%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E3%82%A2%E3%83%B3%E3%83%81%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%A8%E6%B3%A8%E6%84%8F%E7%82%B9)\n  * [3.1 リポジトリにドメインロジックを置く](#31-%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AB%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF%E3%82%92%E7%BD%AE%E3%81%8F)\n  * [3.2 トランザクションを跨ぐ誤用](#32-%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E8%B7%A8%E3%81%90%E8%AA%A4%E7%94%A8)\n- [終わりに](#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB)"
    }
  },
  "__N_SSG": true
}
