{
  "pageProps": {
    "article": {
      "header": {
        "slug": "react_update_to_19",
        "matter": {
          "title": "React19の変更点",
          "createdAt": "2025-03-10T0002:53.325Z",
          "tags": ["React", "typescript"]
        },
        "excerpt": "はじめに 今回は React19 の update における変更点を書いていこうかと思います。 今回のアップデートはメジャーアップデートであり、非同期処理の簡易化やパフォーマンス向上に関する変更が多く含まれています。が、いくつか注意点もあるため残しておこうかと。 1\\. 主な新機能 1.1. Actions API に..."
      },
      "bodyMdText": "\n## はじめに\n\n今回は React19 の update における変更点を書いていこうかと思います。\n今回のアップデートはメジャーアップデートであり、非同期処理の簡易化やパフォーマンス向上に関する変更が多く含まれています。が、いくつか注意点もあるため残しておこうかと。\n\n## 1. 主な新機能\n\n### 1.1. Actions API による非同期フォーム処理・状態管理の簡易化\n\n従来の React では、フォーム送信や非同期データ更新時にサーバーエラー・エラーハンドリング・ローディング状態・Optimistic UI などを手動で useState や useReducer を使って管理する必要がありました。React 19 では useTransition と組み合わせつつ、関数を直接 async にして「トランジション」内で実行するだけで、ペンディング・エラー・フォーム再描画・楽観的更新を自動で処理できる Actions API が導入されました。\n\n以下は、ユーザー名更新フォームを Actions API で実装する例です。\n\n```tsx\n\"use client\";\nimport React, { FormEvent, useTransition } from \"react\";\n\n// サーバーサイドで実際にユーザー名を更新するAction\nexport async function actionUpdateUserName(formData: FormData) {\n  const name = formData.get(\"name\") as string;\n  // 実際にはFetchでAPIを呼び出して更新を行う\n  const response = await fetch(\"/api/user/update-name\", {\n    method: \"POST\",\n    body: JSON.stringify({ name }),\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n  if (!response.ok) {\n    throw new Error(\"サーバーエラー：名前の更新に失敗しました。\");\n  }\n  return await response.json();\n}\n\nexport function UpdateNameForm() {\n  const [isPending, startTransition] = useTransition();\n  const [error, setError] = React.useState<string | null>(null);\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    startTransition(async () => {\n      try {\n        setError(null);\n        // actionUpdateUserName はサーバーに送信して更新するAction\n        await actionUpdateUserName(formData);\n        // 更新後のロジック（例：ページリフレッシュやUIの更新）\n      } catch (err: unknown) {\n        setError((err as Error).message);\n      }\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        新しい名前:\n        <input name=\"name\" defaultValue=\"\" />\n      </label>\n      <button type=\"submit\" disabled={isPending}>\n        {isPending ? \"更新中…\" : \"更新\"}\n      </button>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n    </form>\n  );\n}\n```\n\n上記では、startTransition 内で async な Action（actionUpdateUserName）を呼び出すだけで、isPending の状態制御やエラーキャッチ、再レンダリングなどが内部的に適切に処理されます。従来のようにローディングフラグやエラー状態を細かく手動制御する必要がなくなり、UI の一貫性が担保されます。\n\n※ 注意点\n\n- startTransition 内でエラーを catch しなかった場合、全体の UI が「エラーバウンダリ」にフォールバックしてしまう恐れがあります。必ず適切に try/catch し、ユーザーへフィードバックを返すことが推奨されます\n\n### 1.2. サーバーコンポーネントの強化\n\nReact 18 で導入された Server Components は、クライアントに不要なバンドルを送らずにサーバー側でレンダリングを完結させ、必要な部分のみをクライアントに配信できる仕組みです。React 19 では、この Server Components がさらに安定化し、完全な構文・API サポートが整備されました。\n\n```tsx\n// components/UserProfile.server.tsx\nimport React from \"react\";\nimport { fetchUserById } from \"~/lib/user\";\n\ntype UserProfileProps = { userId: string };\n\n// Server Component: サーバー上でのみ実行される\nexport default async function UserProfile({ userId }: UserProfileProps) {\n  const user = await fetchUserById(userId);\n  return (\n    <div>\n      <h2>{user.name}</h2>\n      <p>メールアドレス: {user.email}</p>\n    </div>\n  );\n}\n```\n\n```tsx\n// app/page.tsx (React 19ではappディレクトリを利用したルーティングが標準化)\nimport React from \"react\";\nimport UserProfile from \"../components/UserProfile.server\";\n\nexport default function Page() {\n  // ここではサーバーコンポーネントをネスト可能\n  return (\n    <html lang=\"ja\">\n      <head>\n        <title>ユーザープロファイル</title>\n      </head>\n      <body>\n        {/* userIdは必要に応じてサーバー側で取得 */}\n        <UserProfile userId=\"12345\" />\n      </body>\n    </html>\n  );\n}\n```\n\n上記サンプルでは、UserProfile.server.tsx がサーバーコンポーネントとして認識され、ビルド時にクライアント向けバンドルには含まれません。これによりクライアントのバンドルサイズ削減と、データ取得の直観的な実装が可能になります。\n\n※ 注意点\n\n- ファイル名の末尾に .server.tsx を付与すると自動的にサーバーコンポーネントと見なされますが、明示的にファイル冒頭で 'use server' / 'use client' を指定することも可能です。どちらか一方で統一しておかないと、バンドルサイズの増加や意図しないクライアントバンドル混入が発生する場合があります\n\n### 1.3. 新規フック群の追加と詳細\n\n#### 1.3.1. `useActionState`\n\nActions API で実行される非同期アクションの状態（ペンディング・エラーなど）を取得するためのフックです。useTransition だけではひとまとめに「トランジション中」か否かしか分かりませんが、useActionState を使うと、どの Action が現在実行中か、エラーだったかといった詳細を得られます。\n\n```tsx\n\"use client\";\nimport React from \"react\";\nimport { useActionState, useTransition } from \"react\";\nimport { actionSubmitForm } from \"../actions/formActions\";\n\nexport function FormComponent() {\n  const [isPending, startTransition] = useTransition();\n  const actionState = useActionState(actionSubmitForm);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget as HTMLFormElement);\n    startTransition(() => actionSubmitForm(formData));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"field1\" />\n      <button type=\"submit\" disabled={isPending}>\n        送信\n      </button>\n      {actionState.isPending && <p>送信中です…</p>}\n      {actionState.error && <p style={{ color: \"red\" }}>{actionState.error.message}</p>}\n    </form>\n  );\n}\n```\n\n#### 1.3.1 useFormStatus\n\nフォームを送信した結果、サーバーサイドでのバリデーションエラーなどをクライアント側で受け取り、フォームに反映するためのフックです。例えば、一括で返却されるバリデーションエラーメッセージを特定のフォームフィールドに紐づけて表示するといった場合に有用です。\n\n```tsx\n\"use client\";\nimport React from \"react\";\nimport { useFormStatus } from \"react\";\nimport { actionRegisterUser } from \"../actions/registerActions\";\n\nexport function RegisterForm() {\n  const formStatus = useFormStatus(actionRegisterUser);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget as HTMLFormElement);\n    try {\n      await actionRegisterUser(formData);\n    } catch {\n      // 例：サーバー側で { email: '既に使用されています', password: '8文字以上必要です' } が返ってくる\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Eメール:\n        <input name=\"email\" />\n        {formStatus.errors?.email && <p>{formStatus.errors.email}</p>}\n      </label>\n      <label>\n        パスワード:\n        <input type=\"password\" name=\"password\" />\n        {formStatus.errors?.password && <p>{formStatus.errors.password}</p>}\n      </label>\n      <button type=\"submit\">登録</button>\n    </form>\n  );\n}\n```\n\n### 1.4. React Compiler\n\nReact 19 では、React Compiler と呼ばれる新しいビルド時最適化ツールが導入されました。これにより、以下のような効果が得られます：\n\n- 再レンダリングの不要な発生を抑制（自動的に useMemo や useCallback 相当の最適化を適用）\n- フラグメントのマージ、コンポーネント切り出しなどの軽量化\n- ビルド出力の圧縮やデッドコード削除の強化\n  これらの最適化は、開発者が明示的に手を加えることなく、React の構文木を解析して自動的に適用されるため、コードの可読性を保ちつつパフォーマンスを向上できます\n\n※ 注意点もあります\n\n- `互換性`：一部の Babel プラグインやカスタムトランスフォーマーと競合する可能性があります。React Compiler を導入する場合は、既存のビルド設定を見直し、テストを十分に行う必要があります。\n\n- `手動での最適化が不要になるわけではない`：React Compiler は多くの最適化を自動化しますが、すべてのケースで最適なパフォーマンスを保証するわけではありません。依然として、重い計算処理やカスタムフックでの最適化は開発者の責任範囲です\n\n## 2. パフォーマンスと最適化に関する改善\n\n### 2.1. Concurrent Rendering のさらなる強化\n\nReact 19 では、並行レンダリング（Concurrent Rendering）の仕組みがアップデートされ、より一貫性のあるプリエンプティブレンダリングが可能になりました。これにより、以下のように改善されます。\n\n`UIスレッドのブロッキング低減`：重い計算を挟んでもユーザー操作やアニメーションを優先的に処理し、インタラクティブ性を維持する\n\n- `優先度付き更新`：ユーザー入力やアンカー遷移など高優先度の更新を即時に反映し、低優先度タスク（データ読み込みなど）を背景で進める\n  - 特に、useDeferredValue や useTransition と組み合わせることで、遷移時のジャンクを大幅に削減できます\n\n## 2.2. 自動バッチ処理（Automatic Batching）の標準化\n\nReact 18 で導入された自動バッチ処理は、イベントハンドラや非同期コールバック内での setState を 1 つの再レンダリングにまとめる機能です。React 19 ではこれがさらに強化され、Promise 内部や setTimeout 内での状態更新もバッチ対象になります。したがって、以下のようなケースでも無駄な再レンダリングを防ぎます\n\n```tsx\n\"use client\";\nimport React, { useState } from \"react\";\n\nexport function Counter() {\n  const [count, setCount] = useState(0);\n\n  const handleClick = () => {\n    // React 19ではこれら3回のsetCountが1回の再レンダリングにまとめられる\n    setCount(c => c + 1);\n    setCount(c => c + 1);\n    setTimeout(() => setCount(c => c + 1), 0);\n  };\n\n  return (\n    <div>\n      <p>現在のカウント: {count}</p>\n      <button onClick={handleClick}>増加</button>\n    </div>\n  );\n}\n```\n",
      "tocMdText": "- [はじめに](#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB)\n- [1. 主な新機能](#1-%E4%B8%BB%E3%81%AA%E6%96%B0%E6%A9%9F%E8%83%BD)\n  * [1.1. Actions API による非同期フォーム処理・状態管理の簡易化](#11-actions-api-%E3%81%AB%E3%82%88%E3%82%8B%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E5%87%A6%E7%90%86%E3%83%BB%E7%8A%B6%E6%85%8B%E7%AE%A1%E7%90%86%E3%81%AE%E7%B0%A1%E6%98%93%E5%8C%96)\n  * [1.2. サーバーコンポーネントの強化](#12-%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E5%BC%B7%E5%8C%96)\n  * [1.3. 新規フック群の追加と詳細](#13-%E6%96%B0%E8%A6%8F%E3%83%95%E3%83%83%E3%82%AF%E7%BE%A4%E3%81%AE%E8%BF%BD%E5%8A%A0%E3%81%A8%E8%A9%B3%E7%B4%B0)\n    + [1.3.1. `useActionState`](#131-useactionstate)\n    + [1.3.1 useFormStatus](#131-useformstatus)\n  * [1.4. React Compiler](#14-react-compiler)\n- [2. パフォーマンスと最適化に関する改善](#2-%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%A8%E6%9C%80%E9%81%A9%E5%8C%96%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E6%94%B9%E5%96%84)\n  * [2.1. Concurrent Rendering のさらなる強化](#21-concurrent-rendering-%E3%81%AE%E3%81%95%E3%82%89%E3%81%AA%E3%82%8B%E5%BC%B7%E5%8C%96)\n- [2.2. 自動バッチ処理（Automatic Batching）の標準化](#22-%E8%87%AA%E5%8B%95%E3%83%90%E3%83%83%E3%83%81%E5%87%A6%E7%90%86automatic-batching%E3%81%AE%E6%A8%99%E6%BA%96%E5%8C%96)"
    }
  },
  "__N_SSG": true
}
